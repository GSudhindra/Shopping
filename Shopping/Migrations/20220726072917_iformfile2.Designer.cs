// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shopping.Models;

namespace Shopping.Migrations
{
    [DbContext(typeof(shopContext))]
    [Migration("20220726072917_iformfile2")]
    partial class iformfile2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Shopping.Models.CartItem", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CartId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Customer_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Product_id")
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("Customer_id");

                    b.HasIndex("Product_id");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Shopping.Models.Customer", b =>
                {
                    b.Property<string>("Customer_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Customer_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Customer_id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Shopping.Models.Product", b =>
                {
                    b.Property<string>("Product_id")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Product_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seller_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Product_id");

                    b.HasIndex("Seller_id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Shopping.Models.ProductMap", b =>
                {
                    b.Property<string>("TrackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product_id")
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("TrackId");

                    b.HasIndex("Product_id");

                    b.ToTable("ProductMap");
                });

            modelBuilder.Entity("Shopping.Models.Seller", b =>
                {
                    b.Property<string>("Seller_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seller_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Seller_id");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("Shopping.Models.CartItem", b =>
                {
                    b.HasOne("Shopping.Models.Customer", "customers")
                        .WithMany()
                        .HasForeignKey("Customer_id");

                    b.HasOne("Shopping.Models.Product", "products")
                        .WithMany("CartItems")
                        .HasForeignKey("Product_id");

                    b.Navigation("customers");

                    b.Navigation("products");
                });

            modelBuilder.Entity("Shopping.Models.Product", b =>
                {
                    b.HasOne("Shopping.Models.Seller", "seller")
                        .WithMany("products")
                        .HasForeignKey("Seller_id");

                    b.Navigation("seller");
                });

            modelBuilder.Entity("Shopping.Models.ProductMap", b =>
                {
                    b.HasOne("Shopping.Models.Product", "product")
                        .WithMany("ProductMap")
                        .HasForeignKey("Product_id");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Shopping.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("ProductMap");
                });

            modelBuilder.Entity("Shopping.Models.Seller", b =>
                {
                    b.Navigation("products");
                });
#pragma warning restore 612, 618
        }
    }
}
